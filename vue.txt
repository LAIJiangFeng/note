官网：https://cli.vuejs.org/zh/ 

1.打开项目文件夹进入cmd 输入 npm install -g @vue/cli 或者 yarn global add @vue/cli
2.下载好之后输入vue create '你的项目名'   回车创建
3.选择

旧版可以:
npm install -g @vue/cli-init
# `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同
vue init webpack my-project


4. npm install element-ui -S 安装elementui

5.main.js 
improt ElementUI from 'element-ui'
import 'element-ui/lib/theme-chalk/index.css'
Vue.use(ElementUI)
6.npm install sass-loader node-sass --save-dev 安装scss

7.webpack.base.conf.js的rules里添加配置
{
    test: /\.sass$/,
    loaders: ['style', 'css', 'sass']
},

8.npm install axios 安装axios 

9. config.index.js 配置代理,设置跨域
proxyTable: {
      '/gp': {
        target: 'http://127.0.0.1:8088/iot',
        changeOrigin: true,
        pathRewrite: {
          '^/gp': '/'
        }
      }
  },

10.封装请求axios
mport axios from 'axios'
import { MessageBox, Message } from 'element-ui'
// import store from '@/store'
// import { getToken } from '@/utils/auth'

// create an axios instance
const service = axios.create({
    baseURL: '/gp',
    withCredentials: true,
    timeout: 10000 // request timeout
})

// request interceptor
service.interceptors.request.use(
    config => {
        // do something before request is sent

        // if (store.getters.token) {
        //     // let each request carry token
        //     // ['X-Token'] is a custom headers key
        //     // please modify it according to the actual situation
        //     config.headers['X-Token'] = getToken()
        // }
        return config
    },
    error => {
        // do something with request error
        //console.log(error) // for debug
        return Promise.reject(error)
    }
)

// response interceptor
service.interceptors.response.use(
    /**
     * If you want to get http information such as headers or status
     * Please return  response => response
     */

    /**
     * Determine the request status by custom code
     * Here is just an example
     * You can also judge the status by HTTP Status Code
     */
    response => {
        const ress = JSON.stringify(response.data)
        const res = JSON.parse(ress);


        //console.log("response.data" + response.data)
        //console.log("response.data" + res.code)
        //console.log("response.errorCode" + res.errorCode)

        // if the custom code is not 20000, it is judged as an error.
        if (res.errorCode == 404 ) {
            
            // store.dispatch('user/resetToken').then(() => {
            //     location.reload()
            // })
            Message({
                message: res.message || 'Error',
                type: 'error',
                duration: 5 * 1000
            })
        }
        if (res.code == null || res.code == 0) {
            return res
        }
       
        if (res.code !== 20000) {
            //console.log("20000")
            Message({
                message: res.message || 'Error',
                type: 'error',
                duration: 5 * 1000
            })

            // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;
            if (res.code === 50008 || res.code === 50012 || res.code === 50014) {
                // to re-login
                MessageBox.confirm('账号或密码错误', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    // store.dispatch('user/resetToken').then(() => {
                    //     location.reload()
                    // })
                })
            }
            return Promise.reject(new Error(res.message || 'Error'))
        } else if (res.code == 20000) {
            //console.log("suess")
            return res
        } else {
            //console.log("else")
            return res
        }
    },
    error => {

        // store.dispatch('user/resetToken').then(() => {
        //     location.reload()
        // })
        return Promise.reject(error)
    }
)

export default service